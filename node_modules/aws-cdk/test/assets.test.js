"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assets_1 = require("../lib/assets");
const util_1 = require("./util");
test('prepare assets', async () => {
    // GIVEN
    const assembly = util_1.testAssembly({
        stacks: [{
                stackName: 'SomeStack',
                template: {
                    Resources: {
                        SomeResource: {
                            Type: 'AWS::Something::Something'
                        }
                    }
                },
                assets: [
                    {
                        sourceHash: 'source-hash',
                        path: __filename,
                        id: 'SomeStackSomeResource4567',
                        packaging: 'file',
                        s3BucketParameter: 'BucketParameter',
                        s3KeyParameter: 'KeyParameter',
                        artifactHashParameter: 'ArtifactHashParameter',
                    }
                ]
            }]
    });
    const toolkit = new FakeToolkit();
    // WHEN
    const params = await assets_1.prepareAssets(assembly.getStackByName('SomeStack'), toolkit);
    // THEN
    expect(params).toEqual([
        { ParameterKey: 'BucketParameter', ParameterValue: 'bucket' },
        { ParameterKey: 'KeyParameter', ParameterValue: 'assets/SomeStackSomeResource4567/||12345.ts' },
        { ParameterKey: 'ArtifactHashParameter', ParameterValue: '12345' },
    ]);
});
test('prepare assets with reuse', async () => {
    // GIVEN
    const stack = util_1.testStack({
        stackName: 'SomeStack',
        assets: [
            {
                path: __filename,
                id: 'SomeStackSomeResource4567',
                packaging: 'file',
                s3BucketParameter: 'BucketParameter',
                s3KeyParameter: 'KeyParameter',
                artifactHashParameter: 'ArtifactHashParameter',
                sourceHash: 'boom'
            }
        ],
        template: {
            Resources: {
                SomeResource: {
                    Type: 'AWS::Something::Something'
                }
            }
        }
    });
    const toolkit = new FakeToolkit();
    // WHEN
    const params = await assets_1.prepareAssets(stack, toolkit, undefined, ['SomeStackSomeResource4567']);
    // THEN
    expect(params).toEqual([
        { ParameterKey: 'BucketParameter', UsePreviousValue: true },
        { ParameterKey: 'KeyParameter', UsePreviousValue: true },
        { ParameterKey: 'ArtifactHashParameter', UsePreviousValue: true },
    ]);
});
test('prepare container asset with reuse', async () => {
    // GIVEN
    const stack = util_1.testStack({
        stackName: 'SomeStack',
        assets: [
            {
                path: __dirname,
                id: 'SomeStackSomeResource4567',
                packaging: 'container-image',
                imageNameParameter: 'asdf',
                sourceHash: 'source-hash'
            }
        ],
        template: {
            Resources: {
                SomeResource: {
                    Type: 'AWS::Something::Something'
                }
            }
        }
    });
    const toolkit = new FakeToolkit();
    // WHEN
    const params = await assets_1.prepareAssets(stack, toolkit, undefined, ['SomeStackSomeResource4567']);
    // THEN
    expect(params).toEqual([
        { ParameterKey: 'asdf', UsePreviousValue: true },
    ]);
});
class FakeToolkit {
    constructor() {
        this.bucketUrl = 'https://bucket';
        this.bucketName = 'bucket';
    }
    async uploadIfChanged(_data, props) {
        const filename = `12345${props.s3KeySuffix}`;
        return {
            filename,
            key: `${props.s3KeyPrefix}${filename}`,
            hash: '12345',
            changed: true,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,